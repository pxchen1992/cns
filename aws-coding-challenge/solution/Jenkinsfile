
pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'cns-ecr-repo'
        ECR_REGISTRY = '045122909431.dkr.ecr.ap-southeast-2.amazonaws.com/cns-repo'
        ECR_REPOSITORY = 'cns-ecr-repo'
        AWS_REGION = 'ap-southeast-2'
        IMAGE_REPO = "${ECR_REGISTRY}/cns"
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {

        stage('Checkout') {
            steps {
                git(branch: 'main', credentialsId: 'cns_github_private', url: 'git@github.com:pxchen1992/cns.git')
            }
        }

        // stage('Install Dependencies') {
        //     steps {
        //             sh 'cp .env.example .env'
        //             sh 'envsubst < .env'
        //             sh 'npm install'
        //             sh 'npm run build'
		//             sh 'sudo usermod -aG docker ${USER}'
		//             sh 'sudo chmod 666 /var/run/docker.sock'
        //             sh 'docker builder prune -f'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t current_time:latest ."
                }
            }
        }

	    stage('Push to AWS ECR') {
            steps {
		withAWS(region:"ap-southeast-2", credentials:"CNS_JENKINS_AWS"){
                script {
                    // Login to ECR
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"

                    // Tag Docker image
                    sh "docker tag ${DOCKER_IMAGE}:latest ${ECR_REGISTRY}:latest"

                    // Push Docker image to AWS ECR
                    sh "docker push ${ECR_REGISTRY}:latest"
                }
            }
        }
}

        stage('Deploy') {
            steps {
                script {
                    withAWS(region:"ap-southeast-2", credentials:"cns_jenkins_aws") {
                    echo 'deploying docker image...'
                    sh 'pwd'
                    sh 'ls'
                    sh 'envsubst < deployment.yaml | kubectl apply -f -'
                    sh 'envsubst < service.yaml | kubectl apply -f -'
                    }
                }
            }
        }
